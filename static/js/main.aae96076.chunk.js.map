{"version":3,"sources":["Photo/Photo.jsx","PhotoGrid/PhotoGrid.jsx","Photos/Photos.jsx","TextContentArea/TextContentArea.jsx","data/data.js","ActivePhoto/ActivePhoto.jsx","PhotoGallery/PhotoGallery.jsx","App/App.js","serviceWorker.js","index.js"],"names":["Photo","props","className","src","Project","photo","alt","name","data-idx","idx","onClick","handleClick","PhotoGrid","Projects","map","key","Photos","renderPhotos","TextContentArea","this","Active","title","description","Component","deployment","ActivePhoto","href","rel","target","PhotoGallery","state","ActiveIndex","length","renderTextContent","e","newActiveIndex","getAttribute","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qYAiBeA,G,wBAdD,SAACC,GACX,OACI,yBAAKC,UAAU,SACX,yBACIC,IAAKF,EAAMG,QAAQC,MACnBC,IAAKL,EAAMG,QAAQG,KACnBC,WAAWP,EAAMQ,IACjBC,QAAUT,EAAMU,YAChBT,UAAW,YCGZU,EAVG,SAACX,GACf,OACI,yBAAKC,UAAU,aACVD,EAAMY,SAASC,KAAI,SAACV,EAAQK,GAAT,OAChB,kBAAC,EAAD,CAAOM,IAAKN,EAAKL,QAAUA,EAASK,IAAOA,EAAKE,YAAcV,EAAMU,mBCSrEK,EAbA,SAACf,GACZ,OACI,yBAAKC,UAAU,UACVD,EAAMgB,aACP,kBAAC,EAAD,CACIN,YAAaV,EAAMU,YACnBE,SAAUZ,EAAMY,aCQjBK,G,uLAbP,OACI,yBAAKhB,UAAY,mBACb,4BAAKiB,KAAKlB,MAAMmB,OAAOC,OAD3B,sBAMI,4BAAKF,KAAKlB,MAAMmB,OAAOE,kB,GATTC,cCuCfV,EA1CE,CACb,CACIQ,MAAO,oBACPhB,MAAO,oCACPiB,YAAa,kCACbE,WAAY,+CAGhB,CACIH,MAAO,eACPhB,MAAO,GACPiB,YAAa,yGACbE,WAAY,IAGhB,CACIH,MAAO,SACPhB,MAAO,kCACPiB,YAAa,oGACbE,WAAY,+DAGhB,CACIH,MAAO,uBACPhB,MAAO,kCACPiB,YAAa,uJACbE,WAAY,uCAEhB,CACIH,MAAO,aACPhB,MAAO,kCACPiB,YAAa,2IACbE,WAAY,iBAEhB,CACIH,MAAO,kBACPhB,MAAO,kCACPiB,YAAa,oFACbE,WAAY,iFCxBLC,G,MAVK,SAACxB,GACjB,OACI,yBAAKC,UAAW,eACZ,uBAAGwB,KAAOzB,EAAMmB,OAAOI,WAAYG,IAAI,sBAAsBC,OAAO,UACpE,yBAAKzB,IAAMF,EAAMmB,OAAOf,MAAOC,IAAML,EAAMmB,OAAOC,YCsC/CQ,E,2MAtCXC,MAAQ,CACJjB,SAAS,YAAKA,GACdkB,YAAa,G,EAGjBd,aAAe,WAAO,IAAD,EACiB,EAAKa,MAA/BjB,EADS,EACTA,SAAUkB,EADD,EACCA,YAClB,GAAIlB,EAASmB,OACT,OAAO,kBAAC,EAAD,CAAaZ,OAAQP,EAASkB,M,EAI7CE,kBAAoB,WAAM,IAAD,EACa,EAAKH,MAA/BjB,EADa,EACbA,SAAUkB,EADG,EACHA,YAClB,GAAIlB,EAASmB,OACT,OAAO,kBAAC,EAAD,CAAiBZ,OAAQP,EAASkB,M,EAIjDpB,YAAc,SAACuB,GACX,IAAMC,EAAiBD,EAAEN,OAAOQ,aAAa,YAC7C,EAAKC,SAAS,CAACN,YAAaI,K,wEAI5B,OACI,yBAAKjC,UAAU,gBACX,kBAAC,EAAD,CACIW,SAAUM,KAAKW,MAAMjB,SACrBI,aAAcE,KAAKF,eACnBN,YAAeQ,KAAKR,cAEvBQ,KAAKc,yB,GAjCKV,aCSZe,MAZf,WAEE,OACE,yBAAKpC,UAAU,OACb,gCACE,gDAEF,kBAAC,EAAD,QCCcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aae96076.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Photo.css\"\n\nconst Photo = (props) => {\n    return (\n        <div className='Photo'>\n            <img\n                src={props.Project.photo}\n                alt={props.Project.name}\n                data-idx= {props.idx}\n                onClick={ props.handleClick}\n                className= \"zoom\"\n            />\n        </div>\n    )\n}\n\nexport default Photo;","import React from 'react';\nimport \"./PhotoGrid.css\"\nimport Photo from \"../Photo/Photo\"\n\nconst PhotoGrid = (props) => {\n    return (\n        <div className=\"PhotoGrid\">\n            {props.Projects.map((Project,idx) =>\n                <Photo key={idx} Project= {Project} idx = {idx} handleClick= {props.handleClick} />\n            )}\n        </div>\n    )\n}\n\nexport default PhotoGrid;","import React from \"react\";\nimport './Photos.css';\nimport PhotoGrid from \"../PhotoGrid/PhotoGrid\";\n\nconst Photos = (props) => {\n    return (\n        <div className='Photos'>\n            {props.renderPhotos}\n            <PhotoGrid\n                handleClick={props.handleClick}\n                Projects={props.Projects}\n            />\n        </div>\n    )\n}\n\n\nexport default Photos;","import React, { Component } from \"react\";\nimport './TextContentArea.css';\n\nclass TextContentArea extends Component {\n    render(){\n        return(\n            <div className = 'TextContentArea'>\n                <h1>{this.props.Active.title}</h1>\n                &nbsp;\n                &nbsp;\n                &nbsp;\n                &nbsp;\n                <h2>{this.props.Active.description}</h2>\n            </div>\n        )\n    }\n}\n\nexport default TextContentArea;","const Projects = [\n    {\n        title: \"Software Engineer\",\n        photo: \"https://i.imgur.com/93zbVYs.jpg?1\",\n        description: \"Hello My name is Blaine Shelton\",\n        deployment: \"https://www.linkedin.com/in/rblaineshelton/\"\n\n    },\n    {\n        title: \"React Pantry\",\n        photo: \"\",\n        description: \"A fun pantry tracker to allow you to keep of when the things that you buy at the grocery store expires\",\n        deployment: \"\"\n\n    },\n    {\n        title: \"Sudoku\",\n        photo: \"https://i.imgur.com/nB8T4SS.png\",\n        description: \"A simple website to play the most relaxing an imfuriating game created! All created in Javscript!\",\n        deployment: \"https://hobby-collector.github.io/Sudoku-web-implementation\"\n\n    },\n    {\n        title: \"Yoyo Contest Judging\",\n        photo: \"https://i.imgur.com/R5s0EhS.png\",\n        description: \" A simple web app to fix a major problem in the yoyoing community to bring yoyo contests from paper to a multipage web app using Javascript mongoose\",\n        deployment: \"http://yoyo-contests.herokuapp.com/\"\n    },\n    {\n        title: \"Mastermind\",\n        photo: \"https://i.imgur.com/3YQdsER.png\",\n        description: \"A react version of the classic game Mastermind! guess the right colors in the right place and you win! built using the full MERN stack. \",\n        deployment: \"this is a url\"\n    },\n    {\n        title: \"Finch Collector\",\n        photo: \"https://i.imgur.com/6EOqpc7.png\",\n        description: \"A fun app for tracking your collection of Finches! Built using Python and Django!\",\n        deployment: \"https://github.com/Hobby-Collector/FinchCollector/tree/master/finchcollector\"\n    }\n]\n\nexport default Projects;","import React from 'react';\nimport './ActivePhoto.css';\n\n\nconst ActivePhoto = (props) => {\n    return (\n        <div className= 'ActivePhoto'>\n            <a href= {props.Active.deployment} rel=\"noopener noreferrer\" target=\"_blank\">\n            <img src= {props.Active.photo} alt= {props.Active.title}/>\n            </a>\n        </div>\n    )\n}\n\nexport default ActivePhoto;","import React, { Component } from \"react\";\nimport './PhotoGallery.css';\nimport Photos from '../Photos/Photos'\nimport TextContentArea from \"../TextContentArea/TextContentArea\";\nimport Projects from '../data/data'\nimport ActivePhoto from \"../ActivePhoto/ActivePhoto\";\n\nclass PhotoGallery extends Component {\n    state = {\n        Projects: [...Projects],\n        ActiveIndex: 0\n    }\n\n    renderPhotos = () => {\n        const { Projects, ActiveIndex } = this.state;\n        if (Projects.length) {\n            return <ActivePhoto Active={Projects[ActiveIndex]} />\n        }\n    }\n\n    renderTextContent = () =>{\n        const { Projects, ActiveIndex } = this.state;\n        if (Projects.length) {\n            return <TextContentArea Active={Projects[ActiveIndex]} />\n        }\n    }\n\n    handleClick = (e) =>{\n        const newActiveIndex = e.target.getAttribute('data-idx');\n        this.setState({ActiveIndex: newActiveIndex});\n    }\n\n    render() {\n        return (\n            <div className='PhotoGallery'>\n                <Photos\n                    Projects={this.state.Projects}\n                    renderPhotos={this.renderPhotos()}\n                    handleClick = {this.handleClick}\n                />\n                {this.renderTextContent()}\n            </div>\n        )\n    }\n}\n\nexport default PhotoGallery;","import React from 'react';\nimport './App.css';\nimport PhotoGallery from \"../PhotoGallery/PhotoGallery\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1> Blaine Shelton</h1>\n      </header>\n      <PhotoGallery />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}